# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def computeRiccitensor2D(Riemanntensor=None,reciprocalmetriccoefficients=None,*args,**kwargs):
    varargin = computeRiccitensor2D.varargin
    nargin = computeRiccitensor2D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: July 18th, 2014
#    Last update: July 18th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    G11=reciprocalmetriccoefficients[:,1]
    G22=reciprocalmetriccoefficients[:,2]
    G12=reciprocalmetriccoefficients[:,3]
    R1111=Riemanntensor[:,1]
    R1112=Riemanntensor[:,2]
    R1121=Riemanntensor[:,3]
    R1122=Riemanntensor[:,4]
    R1211=Riemanntensor[:,5]
    R1212=Riemanntensor[:,6]
    R1221=Riemanntensor[:,7]
    R1222=Riemanntensor[:,8]
    #R2111 = Riemanntensor(:,9);
#R2112 = Riemanntensor(:,10);
    R2121=Riemanntensor[:,11]
    R2122=Riemanntensor[:,12]
    #R2211 = Riemanntensor(:,13);
#R2212 = Riemanntensor(:,14);
    R2221=Riemanntensor[:,15]
    R2222=Riemanntensor[:,16]
    # R_ij = R_ji
    R11=multiply(G11,R1111) + multiply(G12,R1112) + multiply(G12,R1211) + multiply(G22,R1212)
    R12=multiply(G11,R1121) + multiply(G12,R1122) + multiply(G12,R1221) + multiply(G22,R1222)
    R22=multiply(G11,R2121) + multiply(G12,R2122) + multiply(G12,R2221) + multiply(G22,R2222)
    Riccitensor=matlabarray(cat(R11,R22,R12))
    return Riccitensor