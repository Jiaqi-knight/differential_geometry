# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def computecontravariantbase2D(covariantbase=None,sqrtg=None,*args,**kwargs):
    varargin = computecontravariantbase2D.varargin
    nargin = computecontravariantbase2D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: July 18th, 2014
#    Last update: July 18th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    N=size(covariantbase,1)
    g1=matlabarray(cat(covariantbase[:,1:2],zeros(N,1)))
    g2=matlabarray(cat(covariantbase[:,3:4],zeros(N,1)))
    vecprod=matlabarray(cat(zeros(N,1),zeros(N,1),(multiply(g1[:,1],g2[:,2]) - multiply(g1[:,2],g2[:,1]))))
    norm=sqrt(sum(vecprod ** 2,2))
    g3=vecprod / cat(norm,norm,norm)
    G1=cat(multiply(g2[:,2],g3[:,3]) - multiply(g2[:,3],g3[:,2]),multiply(g2[:,3],g3[:,1]) - multiply(g2[:,1],g3[:,3])) / cat(sqrtg,sqrtg)
    
    G2=cat(multiply(g3[:,2],g1[:,3]) - multiply(g3[:,3],g1[:,2]),multiply(g3[:,3],g1[:,1]) - multiply(g3[:,1],g1[:,3])) / cat(sqrtg,sqrtg)
    
    #G3 = [g1(:,2).*g2(:,3)-g1(:,3).*g2(:,2) g1(:,3).*g2(:,1)-g1(:,1).*g2(:,3) g1(:,1).*g2(:,2)-g1(:,2).*g2(:,1)]./sqrtg;
    
    contravariantbase=matlabarray(cat(G1,G2))
    return contravariantbase